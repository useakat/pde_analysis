// 境界の定義 (単位円), いわゆる正の向き
//border Gamma(t=0,2*pi) { x=cos(t); y=sin(t); } 

// 三角形要素分割を生成 (境界を 50 に分割)
//mesh Th = buildmesh(Gamma(50)); 
mesh Th = square(100,10,[-10+20*x,0+0.01*y]); 
//plot(Th,wait=true);

// 有限要素空間は P1 (区分的1次多項式) 要素
fespace Vh(Th,P1);
Vh u,v,uo,uoo;

// Poisson 方程式 -△ u=f の右辺
func f = sin(uo);
//func f = cos(4*atan(exp(x)))*uo;

real dt = 0.01;
int nn = 0;

//func initf = 0.1*sin(x*2*pi/20.);
//func initf = exp(-(x-0.75)^2/0.01);
func initf = 4*atan(exp(x));
//func initf = 0.001*(-x^2 +100);
//func initf = 0.1;
//func initf = 0.0;

uoo = initf;
uo = initf;
//uoo = 0.1*(2.0*randreal1() -1);
//uo = uoo;

real b1 = 4*atan(exp(-10.));
real b2 = 4*atan(exp(10.));
//real b1 = 0.0;
//real b2 = 2*pi;

// differential equation     
problem wave(u,v)	     
   = int2d(Th)(v*u +dt^2*dx(v)*dx(u)*0.5) 
     +int2d(Th)(dt^2*dx(v)*dx(uoo)*0.5) 
     +int2d(Th)(-2*v*uo +v*uoo -dt^2*v*f)
     +on(4, u = b1)
     +on(2, u = b2);

// 現在時刻をメモ
real start = clock();

for (real t=dt; t<=40; t+=dt) {
    nn = nn +1;
    wave; // solve the differential equation
//   plot(u,cmm="t = "+t, ps="data/heat"+t+".eps",bw=1);
   {
      ofstream ug("data/wave"+nn+".dat");
//      for (int i=0; i<Th.nt; i = i+2) {
      for (int i=0; i<200; i = i+2) {
//       for (int j=0; j<3; j++) {
//         ug << Th[i][j].x << " " << Th[i][j].y << " " << u[][Vh(i,j)]<<endl;
//       }
       ug << Th[i][0].x << " " << u[][Vh(i,0)]<<"\n";
      }
   }

   uoo = uo;
   uo = u;
}

// 可視化 (等高線)
//real [int] levels =-0.012:0.001:0.012;
//plot(u,wait=true); 
//plot(u,viso=levels,fill=true,wait=true);

// 可視化 (3 次元) --- マウスで使って動かせる
//plot(u,dim=3,wait=true); 
//plot(u,dim=3,viso=levels,fill=true,wait=true);

// 計算時間を表示
cout << " CPU time= " << clock() - start << endl;